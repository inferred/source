buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
    classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3'
  }
}

plugins {
  id 'checkstyle'
  id 'eclipse'
  id 'java'
  id 'com.bmuschko.nexus' version '2.3.1'
  id 'com.palantir.git-version' version '0.2.0' 
}

repositories {
  mavenCentral()
}

configurations {
  testingCompile.extendsFrom compile
  testingCompileOnly.extendsFrom compileOnly
  testCompile.extendsFrom testingCompile
  testCompileOnly.extendsFrom testingCompileOnly
}

sourceSets {
  testing {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }
  test {
    java {
      compileClasspath += testing.output
      runtimeClasspath += testing.output
    }
  }
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

compileTestJava {
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
}
compileTestingJava {
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
}

dependencies {
  compile commonsLang3
  compile(googleJavaFormat) {
    // Exclude transitive dependencies that don't affect the formatter
    exclude module: 'jcommander'
    exclude module: 'org.eclipse.equinox.app'
    exclude module: 'org.eclipse.core.filesystem'
    exclude module: 'org.eclipse.text'
    exclude module: 'org.eclipse.equinox.registry'
  }
  compile guava

  testingCompile javassist
  testingCompile junit
  testingCompile truth

  testCompile guavaTestlib
  testCompile hamcrest
  testCompile mockito
}

task testingJar(type: Jar) {
  dependsOn tasks.testingClasses
  from tasks.compileTestingJava.outputs, tasks.processTestingResources.outputs
  baseName = 'source-testing'
  assemble.dependsOn it
}

artifacts {
  archives testingJar
}

tasks.withType(Test) {
  testLogging {
    events "passed", "skipped", "failed"
  }
}

//// Checkstyle //////////////////////////////////////////////////
checkstyle {
  toolVersion = "6.19"
  configProperties['config_loc'] = "$rootDir/config/checkstyle"
}

tasks.withType(Checkstyle).each { checkstyleTask ->
  checkstyleTask.doLast {
    reports.all { report ->
      def outputFile = report.destination
      if (outputFile.exists() && outputFile.text.contains("<error ")) {
        throw new GradleException("There were checkstyle warnings! See $outputFile")
      }
    }
  }
}

eclipse.project {
  natures 'net.sf.eclipsecs.core.CheckstyleNature'
  buildCommand 'net.sf.eclipsecs.core.CheckstyleBuilder'
}

//// Publication /////////////////////////////////////////////////
group = 'org.inferred.internal'
version = (System.env.TRAVIS_TAG ?: gitVersion()).replaceAll('^v','')

modifyPom {
  project {
    name 'Source'
    description 'A Java library for code generation'
    url 'https://github.com/inferred/source'

    scm {
      url 'https://github.com/inferred/source'
      connection 'scm:git:git://github.com/inferred/source.git'
      developerConnection 'scm:git:git@github.com:inferred/source.git'
    }

    licenses {
      license {
        name 'Apache 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
      }
    }

    developers {
      developer {
        id 'chrisalice'
        name 'Chris Purcell'
        email 'Chris.Purcell.39@gmail.com'
        timezone 'Europe/London'
      }
    }
  }
}

tasks.withType(Upload) {
  repositories.withType(MavenResolver) {
    addFilter('source') { artifact, file ->
      artifact.name == 'source'
    }
    def testingPom = addFilter('source-testing') { artifact, file ->
      artifact.name == 'source-testing'
    }
    testingPom.scopeMappings.addMapping(
        MavenPlugin.COMPILE_PRIORITY,
        configurations.testingCompile,
        Conf2ScopeMappingContainer.COMPILE)
    testingPom.scopeMappings.addMapping(
        MavenPlugin.RUNTIME_PRIORITY,
        configurations.testingRuntime,
        Conf2ScopeMappingContainer.RUNTIME)
  }
}

ext['signing.keyId'] = System.env.PGP_KEY_ID
ext['signing.password'] = System.env.PGP_PASSWORD
ext['signing.secretKeyRingFile'] = System.env.PGP_SECRET_KEY_RING_FILE
ext['nexusUsername'] = System.env.NEXUS_USERNAME
ext['nexusPassword'] = 'o' + System.env.NEXUS_PASSWORD
// TODO: Fix password when Travis starts working again

apply plugin: 'io.codearte.nexus-staging'

nexusStaging {
  packageGroup = 'org.inferred'
}

//// Eclipse /////////////////////////////////////////////////////
eclipse.classpath {
  // Only src/main/java is compiled with JDK 6
  file.withXml { xml ->
    node = xml.asNode()
    node.findAll { it.@kind == 'src' && it.@path != 'src/main/java' }.each { src ->
        node.remove(src)
    }
  }
  // Don't include test dependencies in the classpath
  plusConfigurations.clear()
  plusConfigurations += [ configurations.compileClasspath ]
}
// Exclude everything in src except src/main
eclipse.project.file.withXml {
  if (asNode().find { it.name() == 'filteredResources' } == null) {
    asNode().append(new XmlParser().parseText("""
      <filteredResources>
        <filter>
          <id>""" + System.currentTimeMillis() + """</id>
          <name>src</name>
          <type>9</type>
          <matcher>
            <id>org.eclipse.ui.ide.multiFilter</id>
            <arguments>1.0-name-matches-false-false-main</arguments>
          </matcher>
        </filter>
      </filteredResources>
    """))
  }
}

import org.gradle.plugins.ide.eclipse.model.EclipseModel
extensions.create("eclipseTesting", EclipseModel)
extensions.create("eclipseTest", EclipseModel)

import org.gradle.plugins.ide.eclipse.GenerateEclipseProject
import org.gradle.plugins.ide.eclipse.internal.LinkedResourcesCreator
task eclipseTestingProject(type: GenerateEclipseProject) {
  description = 'Generates the Eclipse testing project file.'
  inputFile = project.file('.testing/.project')
  outputFile = inputFile
  projectModel.name = project.name + '-testing'
  projectModel.buildCommand 'org.eclipse.jdt.core.javabuilder'
  projectModel.natures "org.eclipse.jdt.core.javanature"
  projectModel.natures 'net.sf.eclipsecs.core.CheckstyleNature'
  projectModel.buildCommand 'net.sf.eclipsecs.core.CheckstyleBuilder'
  projectModel.linkedResource name: 'src', type:'2', location: 'PARENT-1-PROJECT_LOC/src/testing/java'
  eclipseTesting.project = projectModel
  tasks.eclipse.dependsOn it
}
task eclipseTestProject(type: GenerateEclipseProject) {
  description = 'Generates the Eclipse test project file.'
  inputFile = project.file('.test/.project')
  outputFile = inputFile
  projectModel.name = project.name + '-test'
  projectModel.buildCommand 'org.eclipse.jdt.core.javabuilder'
  projectModel.natures "org.eclipse.jdt.core.javanature"
  projectModel.natures 'net.sf.eclipsecs.core.CheckstyleNature'
  projectModel.buildCommand 'net.sf.eclipsecs.core.CheckstyleBuilder'
  projectModel.linkedResource name: 'src', type:'2', location: 'PARENT-1-PROJECT_LOC/src/test/java'
  eclipseTest.project = projectModel
  tasks.eclipse.dependsOn it
}

import org.gradle.plugins.ide.eclipse.GenerateEclipseJdt
task eclipseTestingJdt(type: GenerateEclipseJdt) {
  description = 'Generates the Eclipse testing JDT settings file.'
  inputFile = project.file('.testing/.settings/org.eclipse.jdt.core.prefs')
  outputFile = inputFile
  eclipseTesting.jdt = jdt
  jdt.conventionMapping.map('sourceCompatibility') { JavaVersion.toVersion(compileTestingJava.sourceCompatibility) }
  jdt.conventionMapping.map('targetCompatibility') { JavaVersion.toVersion(compileTestingJava.targetCompatibility) }
  jdt.conventionMapping.map('javaRuntimeName') { 'JavaSE-' + jdt.targetCompatibility }
  tasks.eclipse.dependsOn it
}
task eclipseTestJdt(type: GenerateEclipseJdt) {
  description = 'Generates the Eclipse test JDT settings file.'
  inputFile = project.file('.test/.settings/org.eclipse.jdt.core.prefs')
  outputFile = inputFile
  eclipseTest.jdt = jdt
  jdt.conventionMapping.map('sourceCompatibility') { JavaVersion.toVersion(compileTestJava.sourceCompatibility) }
  jdt.conventionMapping.map('targetCompatibility') { JavaVersion.toVersion(compileTestJava.targetCompatibility) }
  jdt.conventionMapping.map('javaRuntimeName') { 'JavaSE-' + jdt.targetCompatibility }
  tasks.eclipse.dependsOn it
}

import org.gradle.api.internal.plugins.DslObject
import org.gradle.internal.xml.XmlTransformer
import org.gradle.plugins.ide.api.XmlFileContentMerger
import org.gradle.plugins.ide.eclipse.GenerateEclipseClasspath
import org.gradle.plugins.ide.eclipse.model.EclipseClasspath
task eclipseTestingClasspath(type: GenerateEclipseClasspath) {
  description = 'Generates the Eclipse testing classpath file.'
  inputFile = project.file('.testing/.classpath')
  outputFile = inputFile
  classpath = new EclipseClasspath(project)
  classpath.file = new XmlFileContentMerger((XmlTransformer) getProperty('xmlTransformer'))
  classpath.sourceSets = []
  project.afterEvaluate {
    Set<String> containers = new LinkedHashSet<>()
    containers.add(
        'org.eclipse.jdt.launching.JRE_CONTAINER/'
            + 'org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/'
            + eclipseTesting.jdt.javaRuntimeName + '/')
    containers.addAll(classpath.containers)
    classpath.containers = containers
  }
  classpath.plusConfigurations += [
    configurations.testingCompileClasspath
  ]
  classpath.defaultOutputDir = project.file('.testing/bin')
  dependsOn sourceSets.main.output.dirs
  dependsOn sourceSets.testing.output.dirs
  eclipseTesting.classpath = classpath
  tasks.eclipse.dependsOn it
}
task eclipseTestClasspath(type: GenerateEclipseClasspath) {
  description = 'Generates the Eclipse test classpath file.'
  inputFile = project.file('.test/.classpath')
  outputFile = inputFile
  classpath = new EclipseClasspath(project)
  classpath.file = new XmlFileContentMerger((XmlTransformer) getProperty('xmlTransformer'))
  classpath.sourceSets = []
  project.afterEvaluate {
    Set<String> containers = new LinkedHashSet<>()
    containers.add(
        'org.eclipse.jdt.launching.JRE_CONTAINER/'
            + 'org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/'
            + eclipseTest.jdt.javaRuntimeName + '/')
    containers.addAll(classpath.containers)
    classpath.containers = containers
  }
  classpath.plusConfigurations += [
    configurations.testCompileClasspath
  ]
  classpath.defaultOutputDir = project.file('.test/bin')
  dependsOn sourceSets.main.output.dirs
  dependsOn sourceSets.testing.output.dirs
  dependsOn sourceSets.test.output.dirs
  eclipseTest.classpath = classpath
  tasks.eclipse.dependsOn it
}

eclipseTesting.classpath.file.withXml { xml ->
  xml.asNode().appendNode('classpathentry', [
      combineaccessrules: 'false',
      kind: 'src',
      path: '/' + project.name
  ])
  if (xml.asNode().find { it.@kind == 'src' && it.@path == 'src' } == null) {
    xml.asNode().appendNode('classpathentry', [
        kind: 'src',
        path: 'src'
    ])
  }
}
eclipseTest.classpath.file.withXml { xml ->
  xml.asNode().appendNode('classpathentry', [
      combineaccessrules: 'false',
      kind: 'src',
      path: '/' + project.name
  ])
  xml.asNode().appendNode('classpathentry', [
      combineaccessrules: 'false',
      kind: 'src',
      path: '/' + project.name + '-testing'
  ])
  if (xml.asNode().find { it.@kind == 'src' && it.@path == 'src' } == null) {
    xml.asNode().appendNode('classpathentry', [
        kind: 'src',
        path: 'src'
    ])
  }
}
